{
    "openapi": "3.0.3",
    "info": {
        "title": "wAPI",
        "description": "Weeb API.",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/NachoToast/wAPIv2"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/NachoToast/wAPIv2/blob/main/LICENSE"
        },
        "version": "0.0.1"
    },
    "servers": [
        {
            "url": "http://localhost:5000",
            "description": "Development (Local)"
        },
        {
            "url": "http://ntgc.ddns.net:5000",
            "description": "Development (Remote)"
        }
    ],
    "paths": {
        "/": {
            "get": {
                "tags": ["Other"],
                "description": "Returns API version and start time.",
                "responses": {
                    "200": {
                        "description": "Various API information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": ["version", "startTime"],
                                    "additionalProperties": false,
                                    "properties": {
                                        "version": {
                                            "type": "string",
                                            "example": "1.23.45"
                                        },
                                        "startTime": {
                                            "type": "string",
                                            "example": "2022-11-07T13:29:59.374Z"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/ip": {
            "get": {
                "tags": ["Other"],
                "description": "Returns the IP address of the client, useful for [configuring proxies](https://www.npmjs.com/package/express-rate-limit#:~:text=Troubleshooting%20Proxy%20Issues).",
                "responses": {
                    "200": {
                        "description": "IP address of the client, might be `::1` if viewing from the same network. If the configured number of proxies is right, this will be your IP address.",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string",
                                    "example": "123.123.123.123"
                                }
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/spec": {
            "get": {
                "tags": ["Other"],
                "description": "Gets the API spec in JSON format.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OpenAPI specification."
                    }
                }
            }
        },
        "/api-docs": {
            "get": {
                "tags": ["Other"],
                "description": "Gets this document.",
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "This document."
                    }
                }
            }
        },
        "/register": {
            "post": {
                "tags": ["Login Process"],
                "description": "Create an account and login with it.",
                "requestBody": {
                    "$ref": "#/components/requestBodies/loginOrRegisterRequest"
                },
                "responses": {
                    "201": {
                        "description": "Site token of registered user.",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/SiteToken"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request, you're probably missing the `name` or `password` options in the POST request body."
                    },
                    "403": {
                        "description": "Username is invalid or taken. Will be one of:<br />-`Username taken`<br />-`Username does not match <regexp>`<br />-`Password too short (< 4 chars)`",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string",
                                    "example": "Username does not match /^[a-zA-Z0-9]{2,32}$/"
                                }
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": ["Login Process"],
                "description": "Login to an existing account.",
                "requestBody": {
                    "$ref": "#/components/requestBodies/loginOrRegisterRequest"
                },
                "responses": {
                    "200": {
                        "description": "Site token of logged-in user.",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/SiteToken"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request, you're probably missing the `name` or `password` options in the POST request body."
                    },
                    "403": {
                        "description": "One of:<br />-`Incorrect password`<br />-`Name not found`",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/refresh": {
            "get": {
                "tags": ["Login Process"],
                "description": "Refresh/extend current session.",
                "responses": {
                    "200": {
                        "description": "Refreshed site token.",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "$ref": "#/components/schemas/SiteToken"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid (normally expired or malformed) token was provided. At this point a refresh is no longer feasible, you will have to login again."
                    },
                    "401": {
                        "description": "Missing `Authorization` header."
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/users/@me": {
            "get": {
                "description": "Gets the current user's information.",
                "tags": ["User Management"],
                "responses": {
                    "200": {
                        "description": "The current user's information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed or expired token."
                    },
                    "401": {
                        "description": "Missing `Authorization` header."
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/users/{name}": {
            "get": {
                "description": "Gets user information.",
                "tags": ["User Management"],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user's information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid name provided."
                    },
                    "404": {
                        "description": "User with that name could not be found."
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            },
            "patch": {
                "description": "Modify user permissions, requires the `AssignPermissions` permission.",
                "tags": ["User Management"],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["newPermissions"],
                                "additionalProperties": false,
                                "properties": {
                                    "newPermissions": {
                                        "$ref": "#/components/schemas/PermissionsBitField"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User permissions successfully updated."
                    },
                    "400": {
                        "description": "Invalid `newPermissions` value in POST request body, name is invalid, or token is malformed or expired."
                    },
                    "401": {
                        "description": "Missing `Authorization` header."
                    },
                    "403": {
                        "description": "Missing `AssignPermissions` permission, or target user has `AssignPermissions` as well."
                    },
                    "404": {
                        "description": "User with that name could not be found."
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Gets all users. Must have the `AssignPermissions` permission.",
                "tags": ["User Management"],
                "responses": {
                    "200": {
                        "description": "All users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed or expired token."
                    },
                    "401": {
                        "description": "Missing `Authorization` header."
                    },
                    "403": {
                        "description": "Missing `AssignPermissions` permission."
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "PermissionsBitField": {
                "description": "Bit field of permissions for a user:<br />1 << 0: `AssignPermissions`, this user can change other user's permissions (excluding this one).<br />1 << 1: `Audit`, this user can modify post attributes, delete other user's comments, and accept/deny posts.<br />1 << 2: `Comment`, this user can comment on posts (default permission).<br />1 << 3: `Upload`, this user can submit posts (to be audited).",
                "type": "integer"
            },
            "User": {
                "type": "object",
                "required": ["name", "permissions", "registered", "lastLoginOrRefresh", "posts", "comments"],
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "latestIp": {
                        "type": "string",
                        "description": "Last seen IP of the user, only available to users with the `AssignPermissions`permission."
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/PermissionsBitField"
                    },
                    "registered": {
                        "type": "string",
                        "description": "ISO timestamp of when this user registered to the API.",
                        "example": "2022-11-08T02:20:08.190Z"
                    },
                    "lastLoginOrRefresh": {
                        "type": "string",
                        "description": "ISO timestamp of when this user last logged in or refreshed.",
                        "example": "2022-11-08T02:20:08.190Z"
                    },
                    "posts": {
                        "type": "string",
                        "description": "Number of posts this user has made."
                    },
                    "comments": {
                        "type": "string",
                        "description": "Number of comments this user has written."
                    }
                }
            },
            "SiteToken": {
                "description": "Site bearer token, send this in any authentication-requiring endpoints (in the `Authorization` header). E.g. `Authorization Bearer abc123...`",
                "type": "string"
            }
        },
        "requestBodies": {
            "loginOrRegisterRequest": {
                "description": "Name and password of account that you are logging in to or registering.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "required": ["name", "password"],
                            "additionalProperties": false,
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "example": "SiteUser225"
                                },
                                "password": {
                                    "type": "string",
                                    "example": "aVeryQuiteSecurePassword",
                                    "minLength": 4
                                }
                            }
                        }
                    }
                }
            }
        },
        "responses": {
            "429": {
                "description": "Too many requests, you have been ratelimited. All endpoints give the following headers.",
                "headers": {
                    "RateLimit-Limit": {
                        "required": true,
                        "description": "Maximum number of requests per time window.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "RateLimit-Remaining": {
                        "required": true,
                        "description": "Number of requests remaining in this time window.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "RateLimit-Reset": {
                        "required": true,
                        "description": "Number of seconds until this time window ends.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "Retry-After": {
                        "required": true,
                        "description": "Length of time window in seconds.",
                        "schema": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "siteToken": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "JWT signed by server, contains name."
            },
            "rateLimitBypassToken": {
                "type": "apiKey",
                "description": "Token for bypassing ratelimits.",
                "name": "RateLimit-Bypass-Token",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Other",
            "description": "Miscellaneous operations."
        },
        {
            "name": "Login Process",
            "description": "Registering, logging in, and refreshing."
        },
        {
            "name": "User Management",
            "description": "Getting and/or modifying users."
        }
    ],
    "security": [{}, { "siteToken": [] }, { "rateLimitBypassToken": [] }]
}
