import { randomBytes } from 'crypto';
import { existsSync } from 'fs';

export interface Config {
    /** @default 5000 */
    port: number;

    /** @default 0 */
    numProxies: 0;

    /** @default 30 */
    maxRequestsPerMinute: number;

    rateLimitBypassTokens: string[];

    /**
     * Validation RegExp for usernames.
     *
     * This should be in string form in your `config.json` file.
     *
     * @default '^[a-zA-Z0-9!$&*()[\]{}<>\-+_.=";:,|~`^]{2,32}$'
     */
    usernameValidator: RegExp;

    /** String to sign Json Web Tokens with, do not make this easy to guess. */
    jwtSecret: string;

    /**
     * How long sessions should last for before needing a refresh.
     *
     * Expressed in seconds or a string describing a time span zeit/ms. Eg: 60, "2 days", "10h", "7d".
     *
     * @default '7d'
     */
    jwtDuration: string | number;

    // autogenerated values below this point, do not fill these in (or do, it won't matter either way)

    /** Do not include this in your `config.json` file, it is automatically read from the root `package.json` file. */
    version: string;

    /** Do not include this in your `config.json` file, it is automatically created. */
    startedAt: string;
}

interface RawConfig extends Omit<Partial<Config>, 'usernameValidator'> {
    usernameValidator: string;
}

const partialConfig: RawConfig = existsSync('config.json')
    ? require('../config.json')
    : require('../config.example.json');

if (partialConfig.jwtSecret === undefined) {
    console.log('Warning: No jwtSecret defined in config, sessions will not persist between resets!');
}

// apply defaults
const config: Config = {
    port: partialConfig.port ?? 5000,
    numProxies: partialConfig.numProxies ?? 0,
    maxRequestsPerMinute: partialConfig.maxRequestsPerMinute ?? 30,
    rateLimitBypassTokens: partialConfig.rateLimitBypassTokens ?? [],
    usernameValidator: new RegExp(
        partialConfig.usernameValidator ?? '^[a-zA-Z0-9!$&*()[\\]{}<>\\-+_.=";:,|~`^]{2,32}$',
    ),
    jwtSecret: partialConfig.jwtSecret ?? randomBytes(8).toString('hex'),
    jwtDuration: partialConfig.jwtDuration ?? '7d',

    // eslint-disable-next-line @typescript-eslint/no-var-requires
    version: process.env.NPM_VERSION || require('../package.json').version,
    startedAt: new Date().toISOString(),
};

export default config;
